pipeline {
    agent any

    parameters {
        choice(name: 'action', choices: 'create\nrollback', description: 'Create/rollback of the deployment')
        string(name: 'ImageName', description: "Name of the docker build", defaultValue: "kubernetes-configmap-reload")
        // Consider dynamic tagging: string(name: 'ImageTag', description: "Name of the docker build")
        string(name: 'AppName', description: "Name of the Application", defaultValue: "kubernetes-configmap-reload")
        string(name: 'docker_repo', description: "Name of docker repository", defaultValue: "ramesh4598")
    }

    tools {
        maven 'maven3'
    }

    stages {
        stage('Git Checkout') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                gitCheckout(
                    branch: "main", // Update branch name if needed
                    url: "https://github.com/rameshpasupulety/spring-cloud-kubernetes.git"
                )
            }
        }

        stage('Build-Maven') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                dir("${params.AppName}") {
                    sh 'mvn clean package'
                }
            }
        }

        stage("Docker Build and Push") {
            when {
                expression { params.action == 'create' }
            }
            steps {
                dir("${params.AppName}") {
                    dockerBuild("${params.ImageName}:${BUILD_NUMBER}", "${params.docker_repo}") // Consider dynamic tag
                }
            }
        }

        // Add a stage for Docker cleanup (optional)

        stage("Ansible Setup") {
            when {
                expression { params.action == 'create' }
            }
            steps {
                sh 'ansible-playbook ${WORKSPACE}/kubernetes-configmap-reload/server_setup.yml'
            }
        }

        stage("Create deployment") {
            when {
                expression { params.action == 'create' }
            }
            steps {
                // Avoid printing sensitive info directly
                sh 'kubectl create -f ${WORKSPACE}/kubernetes-configmap-reload/kubernetes-configmap.yml'
            }
        }

        stage("wait_for_pods") {
            steps {
                sh 'sleep 300'
            }
        }

        stage("rollback deployment") {
            steps {
                sh """
                    kubectl delete deploy ${params.AppName}
                    kubectl delete svc ${params.AppName}
                """
            }
        }
    }
}
